import maya.cmds as cmds
import tempfile
import base64
import os

from maya.app.general.mayaMixin import MayaQWidgetDockableMixin
import maya.OpenMayaUI as OpenMayaUI
import PySide2.QtCore as QtCore
import PySide2.QtGui as QtGui
import PySide2.QtWidgets as QtWidgets
import shiboken2
import mtoa.ui.arnoldmenu as arnoldmenu


windowID = 'gwCustomShelfWindow'
windowTitle = 'Gergely\'s Custom Toolset'
windowPrefix = 'gwCShelf'
windowSize = (500,32)
margin = (8,0)
color = 0.23


#############################
# Functions
def separator(*args):
    pass
#
def akaLaunchPipe(*args):
    import pipeInterface.ui.pipeInterfaceWindow as pipeInterfaceWindow
    pipeInterfaceWindow.launchPipeInterface()
def akaSaveIncremental(*args):
    import pipeInterface
    import pipeInterface.ui.pipeInterfaceWindow as pipeInterfaceWindow
    win = pipeInterfaceWindow.launchPipeInterface()
    for child in win.dccControlsWidget.children():
        if type(child) is pipeInterface.dcc.maya.ui.pipeInterfaceWidget.PipeWidget:
           child._PipeWidget__dccMaya.saveIncremental()
    win.hide()
def akaPipeUtility(*args):
    from PipeUtility import pipeUtility
    pipeUtility.createUI()
#
def rsUtility(*args):
    import RenderSetupUtility.setup as setup
    import RenderSetupUtility.main.ui as ui
    import RenderSetupUtility.main.uiQt as uiQt
    reload(uiQt)
    reload(setup)
    reload(ui)
    setup.init()
#
def importCameraPreset(*args):
    import maya.cmds as cmds
    import tempfile
    import base64
    import os

    CAMERA_TEMPLATE =""""""

    tempDir = tempfile.gettempdir()
    tempMaya = 'cameraTemplate.mb'
    p = os.path.join(tempDir, tempMaya)
    p = os.path.normpath(p)
    f = open(p, mode='w')
    f.write(base64.b64decode(CAMERA_TEMPLATE))
    f.close()

    if cmds.objExists('camera'):
        raise RuntimeWarning('An object named camera already exists.')
    cmds.file(p, i=True, defaultNamespace=True)
def viewPreset1(*args):
    import maya.cmds as cmds
    from maya.app.general.mayaMixin import MayaQWidgetDockableMixin
    import maya.OpenMayaUI as OpenMayaUI
    import PySide2.QtCore as QtCore
    import PySide2.QtGui as QtGui
    import PySide2.QtWidgets as QtWidgets
    import shiboken2

    mayaMainWindowPointer = OpenMayaUI.MQtUtil.mainWindow()
    mayaMainWindow = shiboken2.wrapInstance(long(mayaMainWindowPointer), QtWidgets.QWidget)

    menuBar = mayaMainWindow.children()[2]

    def getQt(string):
        ptr = OpenMayaUI.MQtUtil.findControl(string)
        qtItem = shiboken2.wrapInstance(long(ptr), QtWidgets.QWidget)
        parent = qtItem.parent()
        if parent:
            gparent = parent.parent()
            if gparent:
                return gparent
            else:
                return parent

    TEMPLATE = {
        'Shelf':True,
        'Outliner':False,
        'NEXDockControl':True,
        'MainPane':False,
        'ToolBox':True,
        'TimeSlider':False,
        'RangeSlider':True,
        'CommandLine':True,
        'StatusLine':True,
        'HelpLine':True,
    }

    def toggle():
        for key in TEMPLATE:
            item = getQt(key)
            if TEMPLATE[key] and item:
                print item.isHidden()
                if item.isHidden() is True:
                    item.show()
                else:
                    item.hide()
    toggle()
def viewPreset2(*args):
    WINDOW_NAME = 'customWorkspace'
    WIDTH = 1585
    HEIGHT = 1150
    POS = [0,1920]

    w = cmds.workspaceControl
    ws = cmds.workspaceControlState
    cmds.TextureViewWindow()
    cmds.arnoldRenderView()

    if w(WINDOW_NAME, query=True, exists=True):
        ws(WINDOW_NAME, defaultTopLeftCorner=POS, defaultWidthHeight=[WIDTH, HEIGHT], height=HEIGHT, width=WIDTH, topLeftCorner=POS)
        w(WINDOW_NAME, widthProperty='fixed', heightProperty='fixed', edit=True, restore=True)

        if w('polyTexturePlacementPanel1Window', query=True, exists=True):
            w('polyTexturePlacementPanel1Window', edit=True, dockToControl=[WINDOW_NAME,'left'])
        if w('ArnoldRenderView', query=True, exists=True):
            w('ArnoldRenderView', edit=True, dockToControl=[WINDOW_NAME,'left'])
    else:
        ws(WINDOW_NAME, defaultTopLeftCorner=POS, defaultWidthHeight=[WIDTH, HEIGHT], height=HEIGHT, width=WIDTH, topLeftCorner=POS)
        w(WINDOW_NAME, widthProperty='fixed', heightProperty='fixed')

        if w('polyTexturePlacementPanel1Window', query=True, exists=True):
            w('polyTexturePlacementPanel1Window', edit=True, dockToControl=[WINDOW_NAME,'left'])
        if w('ArnoldRenderView', query=True, exists=True):
            w('ArnoldRenderView', edit=True, dockToControl=[WINDOW_NAME,'left'])
def viewPreset3(*args):
    WINDOW_NAME = 'customWorkspace'
    WIDTH = 1585
    HEIGHT = 1150
    POS = [0,1920]

    w = cmds.workspaceControl
    ws = cmds.workspaceControlState
    cmds.TextureViewWindow()
    cmds.arnoldRenderView()

    if w(WINDOW_NAME, query=True, exists=True):
        ws(WINDOW_NAME, defaultTopLeftCorner=POS, defaultWidthHeight=[WIDTH, HEIGHT], height=HEIGHT, width=WIDTH, topLeftCorner=POS)
        w(WINDOW_NAME, widthProperty='fixed', heightProperty='fixed', edit=True, restore=True)

        if w('polyTexturePlacementPanel1Window', query=True, exists=True):
            w('polyTexturePlacementPanel1Window', edit=True, dockToControl=[WINDOW_NAME,'left'])
        if w('ArnoldRenderView', query=True, exists=True):
            w('ArnoldRenderView', edit=True, dockToControl=[WINDOW_NAME,'left'])
    else:
        ws(WINDOW_NAME, defaultTopLeftCorner=POS, defaultWidthHeight=[WIDTH, HEIGHT], height=HEIGHT, width=WIDTH, topLeftCorner=POS)
        w(WINDOW_NAME, widthProperty='fixed', heightProperty='fixed')

        if w('polyTexturePlacementPanel1Window', query=True, exists=True):
            w('polyTexturePlacementPanel1Window', edit=True, dockToControl=[WINDOW_NAME,'left'])
        if w('ArnoldRenderView', query=True, exists=True):
            w('ArnoldRenderView', edit=True, dockToControl=[WINDOW_NAME,'left'])
#
def toggleMinimal(*args):
    import maya.cmds as cmds
    from maya.app.general.mayaMixin import MayaQWidgetDockableMixin
    import maya.OpenMayaUI as OpenMayaUI
    import PySide2.QtCore as QtCore
    import PySide2.QtGui as QtGui
    import PySide2.QtWidgets as QtWidgets
    import shiboken2

    mayaMainWindowPointer = OpenMayaUI.MQtUtil.mainWindow()
    mayaMainWindow = shiboken2.wrapInstance(long(mayaMainWindowPointer), QtWidgets.QWidget)

    menuBar = mayaMainWindow.children()[2]

    def getQt(string):
        ptr = OpenMayaUI.MQtUtil.findControl(string)
        qtItem = shiboken2.wrapInstance(long(ptr), QtWidgets.QWidget)
        parent = qtItem.parent()
        if parent:
            gparent = parent.parent()
            if gparent:
                return gparent
            else:
                return parent

    TEMPLATE = {
        'Shelf':True,
        'Outliner':False,
        'NEXDockControl':True,
        'MainPane':False,
        'ToolBox':True,
        'TimeSlider':False,
        'RangeSlider':True,
        'CommandLine':True,
        'StatusLine':True,
        'HelpLine':True,
    }

    def toggle():
        for key in TEMPLATE:
            item = getQt(key)
            if TEMPLATE[key] and item:
                if item.isHidden() is True:
                    mayaMainWindow.children()[2].show()
                    item.show()
                else:
                    mayaMainWindow.children()[2].hide()
                    item.hide()
    toggle()
#
def layoutWindow(*args):

    windowID = 'cameraLayoutWindow'
    window = None
    windowMargin = (8, 8)
    windowFrameWidth = 8
    windowTitleBarHeight = 30

    class Timecode(QtWidgets.QWidget):
        def __init__(self, parent=None):
            super(Timecode, self).__init__(parent=parent)

            palette = QtGui.QPalette(self.palette())
            palette.setColor(QtGui.QPalette.Background, QtCore.Qt.transparent)
            palette.setBrush(QtGui.QPalette.Background, QtGui.QBrush(QtCore.Qt.NoBrush))
            self.setPalette(palette)
            self.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)

        def paintEvent(self, event):
            self.update()

            TIME_PROP = int(cmds.currentTime(query=True))
            START_FRAME = int(cmds.getAttr('defaultRenderGlobals.startFrame'))
            END_FRAME = int(cmds.getAttr('defaultRenderGlobals.endFrame'))
            DURATION = END_FRAME-START_FRAME
            SCENE_NAME = str(cmds.file(query=True, sceneName=True, shortName=True))
            FRAME_RATE = cmds.currentUnit(query=True, time=True)

            FRAME_RATE = cmds.currentUnit(query=True, time=True)
            framerates = {
                'game': 15,
                'film': 24,
                'pal': 25,
                'ntsc': 30,
                'show': 48,
                'palf': 50,
                'ntscf': 60,
            }
            framerate = framerates[FRAME_RATE]

            if len(SCENE_NAME) == 0:
                SCENE_NAME = 'Scene not yet saved'

            def frames_to_timecode(frames):
                return '{0:02d}:{1:02d}:{2:02d}'.format(frames / (60*framerate) % 60,
                                                        frames / framerate % 60,
                                                        frames % framerate)

            painter = QtGui.QPainter()
            painter.begin(self)
            painter.setRenderHint(QtGui.QPainter.Antialiasing)

            width = 635
            height = 52
            margin = 4

            r = QtCore.QRect(0, margin, event.rect().width(), height)
            painter.setPen(QtGui.QPen(QtCore.Qt.NoPen))
            painter.fillRect(r, QtGui.QBrush(QtGui.QColor(0, 0, 0, 50)))


            ############################
            pos = 65

            font = QtGui.QFont();
            font.setStyleHint(QtGui.QFont.AnyStyle, QtGui.QFont.PreferAntialias);
            font.setPixelSize(24);
            font.setBold(True)
            painter.setFont(font)
            painter.setPen(QtGui.QPen(QtGui.QColor(255,255,255,200)))
            r = QtCore.QRect(event.rect().width()-pos-margin, margin*0.5, pos, height)
            painter.drawText(r, QtCore.Qt.AlignVCenter, str(TIME_PROP))
            ############################
            pos = 172

            font = QtGui.QFont();
            font.setStyleHint(QtGui.QFont.AnyStyle, QtGui.QFont.PreferAntialias);
            font.setPixelSize(18);
            font.setBold(True)
            painter.setFont(font)
            painter.setPen(QtGui.QPen(QtGui.QColor(255,255,255,150)))
            r = QtCore.QRect(event.rect().width()-pos-margin, margin*0.5, pos, height)
            painter.drawText(r, QtCore.Qt.AlignVCenter, str(frames_to_timecode(TIME_PROP)) + '   |')
            ############################
            pos = width

            painter.setPen(QtGui.QPen(QtGui.QColor(255,255,255,80)))
            font.setPixelSize(12);
            painter.setFont(font)
            width = 750-(height*0.5)
            sceneString = '%s' % (SCENE_NAME)
            r = QtCore.QRect(0, height*0.5-7, event.rect().width()-415, height)
            painter.drawText(r, QtCore.Qt.AlignRight, sceneString)

            ############################
            pos = 285
            font.setPixelSize(12);
            painter.setPen(QtGui.QPen(QtGui.QColor(255,255,255,80)))
            font.setBold(False)
            painter.setFont(font)
            width = pos
            sceneString = '%s:' % ('Framerate')
            r = QtCore.QRect(event.rect().width()-width-margin, -margin, width, height)
            painter.drawText(r, QtCore.Qt.AlignBottom, sceneString)
            sceneString = '%s:' % ('Duration')
            r = QtCore.QRect(event.rect().width()-width-margin, margin*3, width, height)
            painter.drawText(r, QtCore.Qt.AlignTop, sceneString)

            painter.setPen(QtGui.QPen(QtGui.QColor(255,255,255,150)))
            font.setBold(True)
            painter.setFont(font)
            width = pos-68
            sceneString = '%s' % (framerate)
            r = QtCore.QRect(event.rect().width()-width-margin, -margin, width, height)
            painter.drawText(r, QtCore.Qt.AlignBottom, sceneString)
            sceneString = '%s' % (DURATION)
            r = QtCore.QRect(event.rect().width()-width-margin, margin*3, width, height)
            painter.drawText(r, QtCore.Qt.AlignTop, sceneString)
            ############################
            pos = 395
            painter.setPen(QtGui.QPen(QtGui.QColor(255,255,255,80)))
            font.setBold(False)
            painter.setFont(font)
            width = pos
            sceneString = '%s:' % ('End Frame')
            r = QtCore.QRect(event.rect().width()-width-margin, -margin, width, height)
            painter.drawText(r, QtCore.Qt.AlignBottom, sceneString)
            sceneString = '%s:' % ('Start Frame')
            r = QtCore.QRect(event.rect().width()-width-margin, margin*3, width, height)
            painter.drawText(r, QtCore.Qt.AlignTop, sceneString)

            painter.setPen(QtGui.QPen(QtGui.QColor(255,255,255,150)))
            font.setBold(True)
            painter.setFont(font)
            width = pos-68
            sceneString = '%s' % (END_FRAME)
            r = QtCore.QRect(event.rect().width()-width-margin, -margin, width, height)
            painter.drawText(r, QtCore.Qt.AlignBottom, sceneString)
            sceneString = '%s' % (START_FRAME)
            r = QtCore.QRect(event.rect().width()-width-margin, margin*3, width, height)
            painter.drawText(r, QtCore.Qt.AlignTop, sceneString)
            ############################


            painter.end()
    class CameraLayoutWindow(MayaQWidgetDockableMixin, QtWidgets.QWidget):
        def __init__(self, parent=None):
            super(CameraLayoutWindow, self).__init__(parent=parent)
            self.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred )
            self.setWindowTitle('Camera Layout')
            self.setObjectName(windowID)

            layout = QtWidgets.QStackedLayout()
            layout.setObjectName(windowID)
            layout.setContentsMargins(windowMargin[0],windowMargin[1],windowMargin[0],windowMargin[1])
            layout.setStackingMode(QtWidgets.QStackedLayout.StackAll)
            self.setLayout(layout)
            self.timecode = Timecode(parent=self)
            self.layout().addWidget(self.timecode)
            # print dir(self.timecode)
            # window.layout().setCurrentWidget(paneLayoutQt)

        def paintEvent(self, event):
            rect = QtCore.QRect(0, 0, self.width(), self.height())

            painter = QtGui.QPainter()
            painter.begin(self)
            painter.setPen(QtGui.QPen(QtGui.QColor(210,210,210)))
            painter.setBrush(QtGui.QBrush(QtGui.QColor(48,48,48)))
            painter.setRenderHint(QtGui.QPainter.Antialiasing)

            painter.save()
            painter.drawRect(rect)
            painter.restore()
            painter.end()

    def deleteUI():
        # ugly way of trying to delete existing ui
        try:
            cmds.deleteUI('%s'%(windowID))
        except:
            pass
        try:
            cmds.deleteUI('%s%s'%(windowID, 'WorkspaceControl'))
        except:
            pass
        try:
            cmds.deleteUI('%s%s'%(windowID, 'ModelPanel#'))
        except:
            pass
    def createUI():
        global window

        mayaMainWindowPointer = OpenMayaUI.MQtUtil.mainWindow()
        mayaMainWindow = shiboken2.wrapInstance(long(mayaMainWindowPointer), QtWidgets.QWidget)

        window = CameraLayoutWindow(parent=mayaMainWindow)


        layout = long(shiboken2.getCppPointer(window.layout())[0])
        layoutName = OpenMayaUI.MQtUtil.fullName(layout)

        paneLayoutName = cmds.paneLayout('%s%s'%(windowID, 'PaneLayout#'), parent=layoutName)
        ptr = OpenMayaUI.MQtUtil.findControl(paneLayoutName)
        paneLayoutQt = shiboken2.wrapInstance(long(ptr), QtWidgets.QWidget)
        modelPanelName = cmds.modelPanel('%s%s'%(windowID, 'ModelPanel#'), parent=paneLayoutName, cam='camera')

        window.setContentsMargins(windowMargin[0],windowMargin[1],windowMargin[0],windowMargin[1])
        window.layout().setCurrentWidget(paneLayoutQt)

        children = window.children()
        for child in children:
            if type(child) is QtWidgets.QVBoxLayout:
                layout = child
            if type(child) is QtWidgets.QWidget:
                children = child.children()
                for child in children:
                    if type(child) is QtWidgets.QVBoxLayout:
                        layout = child
                    if type(child) is QtWidgets.QSplitter:
                        children = child.children()
                        for child in children:
                            if type(child) is QtWidgets.QWidget:
                                children = child.children()
                                for child in children:
                                    if type(child) is QtWidgets.QVBoxLayout:
                                        layout = child
                                    if type(child) is QtWidgets.QWidget:
                                        parent = child
                                        children = child.children()
                                        for child in children:

                                            if type(child) is QtWidgets.QLayout:
                                                layout = child
                                            if type(child) is QtWidgets.QWidget:
                                                """modelEditorIconBar"""
                                                child.hide()
                                            if type(child) is QtWidgets.QStackedWidget:
                                                """viewport_wrapper"""
                                                parent = child
                                                children = child.children()
                                                for child in children:
                                                    if type(child) is QtWidgets.QStackedLayout:
                                                        """layout"""
                                                        layout = child
                                                    if type(child) is QtWidgets.QWidget:
                                                        """viewport"""
                                                        viewport = child

                                    if type(child) is QtWidgets.QMenuBar:
                                        """MenuBar"""
                                        menuBar = child
                                        menuBar.setStyleSheet(
                                            'QMenuBar {margin: 0 16 0 }'
                                        )
                            if type(child) is QtWidgets.QSplitterHandle:
                                pass
                    if type(child) is QtWidgets.QWidget:
                        pass


        def _setAlignment():
            primary = QtWidgets.QDesktopWidget().screenGeometry(0)
            cmds.workspaceControlState('%s%s'%(windowID, 'WorkspaceControl'))
            if QtWidgets.QDesktopWidget().screenCount() > 1:
                secondary = QtWidgets.QDesktopWidget().screenGeometry(1)
                cmds.workspaceControlState('%s%s'%(windowID, 'WorkspaceControl'), edit=True, topLeftCorner=(secondary.getCoords()[1], secondary.getCoords()[0]), width=secondary.width()-(windowFrameWidth*2), height=secondary.height()-8-30)
            else:
                cmds.workspaceControlState('%s%s'%(windowID, 'WorkspaceControl'), edit=True, topLeftCorner=(primary.getCoords()[1], primary.getCoords()[0]), width=primary.width()-(windowFrameWidth*2), height=primary.height()-8-30)
        _setAlignment()
        window.show(dockable=True)

        ptr = OpenMayaUI.MQtUtil.findControl('%s%s'%(windowID, 'WorkspaceControl'))
        workspaceControl = shiboken2.wrapInstance(long(ptr), QtWidgets.QWidget)
        workspaceControl.setStyleSheet(
            'QWidget {\
                font-family: "Segoe UI";\
                font-size: 12;\
            	font-style: normal;\
            	font-variant: normal;\
                color: rgb(150,150,150);\
                backgroundp-color: rgb(50,50,50);\
                font-weight: normal;\
                margin:2;\
                padding:0;\
                border-style: none;\
                border-width: 0\
            }\
            QWidget:active {\
                border-style: none;\
                border-width: 0\
            }\
            QWidget:focus {\
                border-style: none;\
                border-width: 0\
            }'
        )

        def _getGraphEd():
            try:
                cmds.deleteUI('graphEditor1')
                cmds.deleteUI('graphEditor1Window')
            except:
                pass

            cmds.GraphEditor()

            ptr = OpenMayaUI.MQtUtil.findControl('graphEditor1')
            graphEditorQt = shiboken2.wrapInstance(long(ptr), QtWidgets.QWidget)

            children = graphEditorQt.children()
            for child in children:
                if type(child) is QtWidgets.QMenuBar:
                    child.hide()
                if type(child) is QtWidgets.QWidget:

                    children = child.children()
                    children[1].hide() # topBar

                    children = children[2].children()
                    children[2].hide() # bottomPart

                    children = children[1].children()
                    children[1].hide() #sideBar
                    children[2].show()

                    children[0] #graphEditor1GraphEd
                    return graphEditorQt

        graphEdQt = _getGraphEd()
        ptr = OpenMayaUI.MQtUtil.findControl('graphEditor1')
        graphEditorQt = shiboken2.wrapInstance(long(ptr), QtWidgets.QWidget)
        graphEditorQt.setFixedHeight(45)

        if cmds.workspaceControl('graphEditor1Window', query=True, exists=True):
            cmds.workspaceControl('graphEditor1Window', edit=True, visible=False)

        graphEditorQt.setParent(workspaceControl)

        workspaceControl.layout().insertWidget(1, graphEditorQt)
        workspaceControl.layout().setContentsMargins(0,0,0,0)
        workspaceControl.layout().setStretch(0, 0.9)
        workspaceControl.layout().setStretch(1, 0.1)
        return modelPanelName

    def setDisplayDefaults(modelPanelName):
        mAttributes = (
            {'displayLights':'default'},
            {'twoSidedLighting':False},
            {'displayAppearance':'smoothShaded'},
            {'wireframeOnShaded':False},
            {'headsUpDisplay':False},
            {'selectionHiliteDisplay':False},
            {'useDefaultMaterial':False},
            {'useRGBImagePlane':True},
            {'backfaceCulling':True},
            {'xray':False},
            {'jointXray':False},
            {'activeComponentsXray':False},
            {'maxConstantTransparency':1.0},
            {'displayTextures':False},
            {'smoothWireframe':True},
            {'lineWidth':1.0},
            {'textureAnisotropic':False},
            {'textureSampling':2},
            {'textureDisplay':'modulate'},
            {'textureHilight':True},
            {'shadows':False},
            {'rendererName':'vp2Renderer'},
            {'nurbsCurves':False},
            {'nurbsSurfaces':False},
            {'polymeshes':True},
            {'subdivSurfaces':True},
            {'planes':False},
            {'lights':False},
            {'cameras':False},
            {'controlVertices':False},
            {'grid':False},
            {'hulls':False},
            {'joints':False},
            {'ikHandles':False},
            {'deformers':False},
            {'dynamics':False},
            {'fluids':False},
            {'hairSystems':False},
            {'follicles':False},
            {'nCloths':False},
            {'nParticles':False},
            {'nRigids':False},
            {'dynamicConstraints':False},
            {'locators':False},
            {'manipulators':False},
            {'dimensions':False},
            {'handles':False},
            {'pivots':False},
            {'textures':False},
            {'strokes':False}
        )

        def _set(**kwargs):
            return cmds.modelEditor(modelEditorName, edit=True, **kwargs)
        def _get(**kwargs):
            return cmds.modelEditor(p, query=True, **kwargs)

        modelEditorName = cmds.modelPanel(modelPanelName, query=True, modelEditor=True)
        for item in mAttributes:
            key = next(iter(item))
            if item[key] is not None:
                _set(**item)

    deleteUI()
    modelPanelName = createUI()
    setDisplayDefaults(modelPanelName)
def assetWindow(*args):
    pass
    #
def randomizedDuplicate(*args):
    import maya.cmds as cmds
    import random

    class RandomDuplicate(object):
        windowID = 'RandomDuplicateWindow'
        windowTitle = 'Randomized Duplicates'
        windowWidthHeight = (150,200)

        def __init__(self):
            self.numCopies = None
            self.x = {'rot': 0.0, 'pos': 0.0, 'scl': 0.0, 'spacing': 0.0, 'sclRand': 0.0, 'posRand': 0.0, 'additive': False}
            self.y = {'rot': 0.0, 'pos': 0.0, 'scl': 0.0, 'spacing': 0.0, 'sclRand': 0.0, 'posRand': 0.0, 'additive': False}
            self.z = {'rot': 0.0, 'pos': 0.0, 'scl': 0.0, 'spacing': 0.0, 'sclRand': 0.0, 'posRand': 0.0, 'additive': False}
            self.merge = False
        def createUI(self):
            try:
                cmds.deleteUI(self.windowID)
            except:
                pass
            if cmds.workspaceControl(self.windowID, exists=True):
                cmds.workspaceControl(self.windowID, edit=True, restore=True)
                return
            else:
                cmds.workspaceControl(self.windowID,
                    label=self.windowTitle,
                    uiScript='',
                    floating=True,
                    loadImmediately=True,
                    heightProperty='preferred',
                    initialHeight=self.windowWidthHeight[0],
                    initialWidth=self.windowWidthHeight[1]
                )

            root = '%s_%s'%(self.windowID,'scrollLayout01')
            cmds.scrollLayout(root, parent=self.windowID)

            #Rotataion
            def _addProperties(label, group):
                cmds.rowLayout(
                    '%s_%s'%(self.windowID,'rowLayout#0'.replace('#',group)),
                    parent=root,
                    numberOfColumns=1,
                    columnAlign1='left',
                    columnAttach1='both',
                    columnWidth1=self.windowWidthHeight[0]
                )
                cmds.text('%s_%s'%(self.windowID,'text#1'.replace('#',group)), label=label, parent='%s_%s'%(self.windowID,'rowLayout#0'.replace('#',group)))

                width = self.windowWidthHeight[0]*(1.0/6.0)
                p = '%s_%s'%(self.windowID,'rowLayout#1'.replace('#',group))
                o = 1.25
                cmds.rowLayout(
                    p,
                    parent=root,
                    numberOfColumns=6,
                    columnAlign6=('right','left','right','left','right','left'),
                    columnAttach6=('both','both','both','both','both','both'),
                    columnWidth6=(width/o,width*o,width/o,width*o,width/o,width*o),
                    columnOffset6=(3,0,3,0,3,0)
                )
                cmds.text('%s_%s'%(self.windowID,'text#0'.replace('#',group)), label='x', parent=p)
                cmds.textField('%s_%s'%(self.windowID,'textField#0'.replace('#',group)), parent=p)
                cmds.text('%s_%s'%(self.windowID,'text#1'.replace('#',group)), label='y', parent=p)
                cmds.textField('%s_%s'%(self.windowID,'textField#1'.replace('#',group)), parent=p)
                cmds.text('%s_%s'%(self.windowID,'text#2'.replace('#',group)), label='z', parent=p)
                cmds.textField('%s_%s'%(self.windowID,'textField#2'.replace('#',group)), parent=p)

                if label == 'Scale' or label == 'Position':
                    pass
                else:
                    return

                p = '%s_%s'%(self.windowID,'rowLayout#2'.replace('#', group))
                cmds.rowLayout(
                    p,
                    parent=root,
                    numberOfColumns=6,
                    columnAlign6=('right','left','right','left','right','left'),
                    columnAttach6=('both','both','both','both','both','both'),
                    columnWidth6=(width/o,width*o,width/o,width*o,width/o,width*o),
                    columnOffset6=(3,0,3,0,3,0)
                )
                cmds.text('%s_%s'%(self.windowID,'text#3'.replace('#',group)), label='~', parent=p)
                cmds.textField('%s_%s'%(self.windowID,'textField#3'.replace('#',group)), parent=p)
                cmds.text('%s_%s'%(self.windowID,'text#4'.replace('#',group)), label='~', parent=p)
                cmds.textField('%s_%s'%(self.windowID,'textField#4'.replace('#',group)), parent=p)
                cmds.text('%s_%s'%(self.windowID,'text#5'.replace('#',group)), label='~', parent=p)
                cmds.textField('%s_%s'%(self.windowID,'textField#5'.replace('#',group)), parent=p)

                if label == 'Position': pass
                else: return

                p = '%s_%s'%(self.windowID,'rowLayout#3'.replace('#', group))
                cmds.rowLayout(
                    p,
                    parent=root,
                    numberOfColumns=6,
                    columnAlign6=('right','left','right','left','right','left'),
                    columnAttach6=('both','right','both','right','both','right'),
                    columnWidth6=(width/o,width*o,width/o,width*o,width/o,width*o),
                    columnOffset6=(3,0,3,0,3,0)
                )
                cmds.text('%s_%s'%(self.windowID,'text#3'.replace('#',group)), label='+', parent=p)
                cmds.checkBox('%s_%s'%(self.windowID,'checkBox#0'.replace('#',group)), label='', parent=p)
                cmds.text('%s_%s'%(self.windowID,'text#4'.replace('#',group)), label='+', parent=p)
                cmds.checkBox('%s_%s'%(self.windowID,'checkBox#1'.replace('#',group)), label='', parent=p)
                cmds.text('%s_%s'%(self.windowID,'text#5'.replace('#',group)), label='+', parent=p)
                cmds.checkBox('%s_%s'%(self.windowID,'checkBox#2'.replace('#',group)), label='', parent=p)


            _addProperties('Scale', '1')
            _addProperties('Rotation', '2')
            _addProperties('Position', '3')

            # Numcopies / Merge
            group = '4'
            p = '%s_%s'%(self.windowID,'rowLayout#0'.replace('#', group))
            width = self.windowWidthHeight[0]*0.25
            cmds.rowLayout(
                p,
                parent=root,
                numberOfColumns=4,
                columnAlign4=('right','left','right','right'),
                columnAttach4=('both','both','both','right'),
                columnWidth4=(width,width,width*1.7,width/1.8),
                columnOffset4=(0,0,0,0)
            )
            cmds.text('%s_%s'%(self.windowID,'text#0'.replace('#',group)), label='Copies:', parent=p)
            cmds.textField('%s_%s'%(self.windowID,'textField#0'.replace('#',group)), parent=p)
            cmds.text('%s_%s'%(self.windowID,'text#1'.replace('#',group)), label='Merge:', parent=p)
            cmds.checkBox('%s_%s'%(self.windowID,'checkBox#0'.replace('#',group)), parent=p, label='')

            group = '5'
            p = '%s_%s'%(self.windowID,'columnLayout#0'.replace('#', group))
            cmds.rowLayout(p, parent=root, columnAlign1='left', columnAttach1='both', columnWidth1=self.windowWidthHeight[0]+13)
            cmds.button('%s_%s'%(self.windowID,'button#0'.replace('#', group)), label='Duplicate', command=self.doIt)

            def _setDefaults():
                group = '1'
                cmds.textField('%s_%s'%(self.windowID,'textField#0'.replace('#',group)), edit=True, text='1')
                cmds.textField('%s_%s'%(self.windowID,'textField#1'.replace('#',group)), edit=True, text='1')
                cmds.textField('%s_%s'%(self.windowID,'textField#2'.replace('#',group)), edit=True, text='1')
                cmds.textField('%s_%s'%(self.windowID,'textField#3'.replace('#',group)), edit=True, text='0')
                cmds.textField('%s_%s'%(self.windowID,'textField#4'.replace('#',group)), edit=True, text='0')
                cmds.textField('%s_%s'%(self.windowID,'textField#5'.replace('#',group)), edit=True, text='0')
                group = '2'
                cmds.textField('%s_%s'%(self.windowID,'textField#0'.replace('#',group)), edit=True, text='0')
                cmds.textField('%s_%s'%(self.windowID,'textField#1'.replace('#',group)), edit=True, text='0')
                cmds.textField('%s_%s'%(self.windowID,'textField#2'.replace('#',group)), edit=True, text='0')
                group = '3'
                cmds.textField('%s_%s'%(self.windowID,'textField#0'.replace('#',group)), edit=True, text='0')
                cmds.textField('%s_%s'%(self.windowID,'textField#1'.replace('#',group)), edit=True, text='0')
                cmds.textField('%s_%s'%(self.windowID,'textField#2'.replace('#',group)), edit=True, text='0')
                cmds.textField('%s_%s'%(self.windowID,'textField#3'.replace('#',group)), edit=True, text='0')
                cmds.textField('%s_%s'%(self.windowID,'textField#4'.replace('#',group)), edit=True, text='0')
                cmds.textField('%s_%s'%(self.windowID,'textField#5'.replace('#',group)), edit=True, text='0')
                group = '4'
                cmds.textField('%s_%s'%(self.windowID,'textField#0'.replace('#',group)), edit=True, text='1')
            _setDefaults()
        def _setValues(self):
            group = '1'
            self.x['scl'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#0'.replace('#',group)), query=True, text=True))
            self.y['scl'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#1'.replace('#',group)), query=True, text=True))
            self.z['scl'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#2'.replace('#',group)), query=True, text=True))
            self.x['sclRand'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#3'.replace('#',group)), query=True, text=True))
            self.y['sclRand'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#4'.replace('#',group)), query=True, text=True))
            self.z['sclRand'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#5'.replace('#',group)), query=True, text=True))
            group = '2'
            self.x['rot'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#0'.replace('#',group)), query=True, text=True))
            self.y['rot'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#1'.replace('#',group)), query=True, text=True))
            self.z['rot'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#2'.replace('#',group)), query=True, text=True))
            group = '3'
            self.x['pos'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#0'.replace('#',group)), query=True, text=True))
            self.y['pos'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#1'.replace('#',group)), query=True, text=True))
            self.z['pos'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#2'.replace('#',group)), query=True, text=True))
            self.x['posRand'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#3'.replace('#',group)), query=True, text=True))
            self.y['posRand'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#4'.replace('#',group)), query=True, text=True))
            self.z['posRand'] = float(cmds.textField('%s_%s'%(self.windowID,'textField#5'.replace('#',group)), query=True, text=True))
            self.x['additive'] = cmds.checkBox('%s_%s'%(self.windowID,'checkBox#0'.replace('#',group)), query=True, value=True)
            self.y['additive'] = cmds.checkBox('%s_%s'%(self.windowID,'checkBox#1'.replace('#',group)), query=True, value=True)
            self.z['additive'] = cmds.checkBox('%s_%s'%(self.windowID,'checkBox#2'.replace('#',group)), query=True, value=True)
            group = '4'
            self.numCopies = int(cmds.textField('%s_%s'%(self.windowID,'textField#0'.replace('#',group)), query=True, text=True))
            self.merge = cmds.checkBox('%s_%s'%(self.windowID,'checkBox#0'.replace('#',group)), query=True, value=True)
        def doIt(self, *args):
            def r(n): return int(n)*random.uniform(-1, 1)
            def setAttr(i,additive,spacing,spacingRandom,o,attr):
                if additive: n = i+1
                else: n = 1
                if spacing == 0:
                    pos = r(1)*spacingRandom
                else:
                    pos = (n*spacing)+(r(spacing)*spacingRandom)
                cmds.setAttr('%s.%s'%(o,attr), pos)
            self._setValues()
            sel = cmds.ls(selection=True)
            duplicates = []
            for s in sel:
                for index in xrange(self.numCopies):
                    obj = cmds.duplicate(s, renameChildren=True)
                    duplicates.append(obj[0])
                    # Scale
                    setAttr(index, False, self.x['scl'], self.x['sclRand'], obj[0], 'sx')
                    setAttr(index, False, self.y['scl'], self.y['sclRand'], obj[0], 'sy')
                    setAttr(index, False, self.z['scl'], self.z['sclRand'], obj[0], 'sz')
                    # Rotation
                    cmds.setAttr('%s.rx'%(obj[0]), r(self.x['rot']))
                    cmds.setAttr('%s.ry'%(obj[0]), r(self.y['rot']))
                    cmds.setAttr('%s.rz'%(obj[0]), r(self.z['rot']))
                    # Position
                    setAttr(index, self.x['additive'], self.x['pos'], self.x['posRand'], obj[0], 'tx')
                    setAttr(index, self.y['additive'], self.y['pos'], self.y['posRand'], obj[0], 'ty')
                    setAttr(index, self.z['additive'], self.z['pos'], self.z['posRand'], obj[0], 'tz')
            cmds.select(duplicates)
            if self.merge:
                s = cmds.polyUnite(duplicates)
                cmds.cutKey(s, shape=True, hierarchy='both')
                cmds.makeIdentity(apply=True)
                cmds.delete(s, constructionHistory=True)


    rd = RandomDuplicate()
    rd.createUI()
#############################

# uiIcons
icons = {
    'akaPipe32':
    """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA4BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpERDg2NTcwMjAzRkQxMUU3QjNFM0RFQzhERjgwNUJCMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpERDI4Qzc1QTIxQzMxMUU3OEEyMzk5RDM3Q0U4MkYwQyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpERDI4Qzc1OTIxQzMxMUU3OEEyMzk5RDM3Q0U4MkYwQyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDplM2Y4MTljOC02MzAyLWM3NDctOGJhZS0wZDNiMGIwN2EwYzYiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo0MjZlZjMzMC0yMWI4LTExZTctODI0My1lODk5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""",
    'akaPipeUtility32':
    """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA4BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpERDg2NTcwMjAzRkQxMUU3QjNFM0RFQzhERjgwNUJCMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpEM0Q2OUJGQTIxQzMxMUU3OTkwRkY5Q0U2NDYyNDc0RSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpEM0Q2OUJGOTIxQzMxMUU3OTkwRkY5Q0U2NDYyNDc0RSIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDplM2Y4MTljOC02MzAyLWM3NDctOGJhZS0wZDNiMGIwN2EwYzYiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo0MjZlZjMzMC0yMWI4LTExZTctODI0My1lODk5ODJjOWUwYjIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7iTCOqAAAG/UlEQVR42sRXaUxUVxT+Zh8YNpVlQBFBwQqo6NiIIlaRYq3GX2C0EXdttBorwS5iFY3WJWq1/dXFRNCY/mjUuFCXqLVqlSVRsSwKqCgyLCIyDIzMwuu5B4ZOIamKrd7k5b133733fPec73znPlliYtI0APvpCsSbbUa6FstfxbgkSZDJZFAoFJDL5a8LQNjcr3wV42q1GiaTCfX19dBoNNDr9Qyovb291yCULztSGLLZbNCS4fAhQ9iold5F/+u0l/ajUqnEvXv3McZgwA8/fo/NmzJhtdphsVheC4DyVQZbbVa469wRFBQEWbsEQQOHQ/pvAThJJmLenXxuWi2am5vx/PlzNDQ00Dg57HYZE9JJSrvd3uUx17muPHF9VroaFpMEyaqNNWh32EUnvDw8odSo0dT4DI8ePWJwKpUKMqW8c44ajY2NqKmpZUChoaFwc3dDRXkFAW2D2Ie7uxaenp48rp08FxwcDK1WQ95zdAAQC8nkMlRVVUEuk2Pq+4kYFDIILZZW5OXmwtPLCxPnT8QfV6/CYe+Iu4J2rJArUFNfDX2AP+KTJ8Dbxwd5eXnIzy3ApISJiIqKIkNuKMjPR8PTRkyfPg0qhQrXrl+HqdlMWaX62wPV1dUI1AciI2MdDKNHw8PTgxFWlJdDSZPChoQhYmgEzvx6GmYzTVZp8ZS8Qk7Gps2bYBhjwIMHD3Du3Fmkp6/BoiWL0KdPHw7Nk7onqK2tRUhoCAHSYsnipTDSu1rt0wGgidyu9/fH7l07MXzECI7R1StXGMTIkTFd8RLxddA34bFW8k5LixnpaWmImxBHGzAiY10GUpKTsXLVSjZ8t/QOHpNX4+Li4Ovvy2uYmkwUXlrDNQ1bzS2YM2cOG3/27BnWrv0cqfMWYvbsjwjULjJs48FtRD5nyMxExkULF2LegnnEm2asz1hPXlFhxYrlbDwrKxuzZs/B/MWL8fHy5Rxe0SytFtqEo0s/GIBwVWzsWO7IOpCN7OxDTBSVSo1v9n6LE8dPdRjuZLrwUGRUJFavXMVc2L1rN345cgRzU+dCSSDyrudi+/adlDFmREQMxbHjJ7Bv7z72oAhBDyHSeejgRSwV6VVaWsL53bdvH/j5+cFOPCgpLumRWu46HVRuaiZkSUkJbFYrAvwD+LvggsnUhAAipzcRWENGS0pKOYWVSkVPACI96uvqGV3s2FjOhIr791FOBBS57/SOM8eFi4v+LMJpIqQAsmHDBoSHh+PqtWv8PTI6mozrSTnv4eHDh+T2VowbPw7e3t6wda7xDwAinjmnT3NH6rxUpH+2FhLtXGTF11u3IiExoQMAab9TWASYLVu24kbBDUQPj8K6L79Azqkc5lB0dBR27NjGaSh05RPiRdqaNQzc0mJBu4vIgc4D0vi4eGnEiBjp5IlTkrM9rKyUGp408DPFnO9nzp6TiKBSW6tFIpfTnJHS5MlTJHOzWSJA0prVn0opySkShYXHi/6KsjLJtTlsDik1db5kMLwrCduKsLDBmaK0mltacP78Bfh4+3Ds+/fvD62bFsXFxdizew+7zk2tIY7cgZe3F+rq63DrViEKCgrYMwlTEihUsTh8+Gdc/v0KkS8C+qBA9O3XD3WkA/t/2o98EqT+A4JIiHJJOWs45DKBwinDRmMtiYyJXBfJWdDWZsWdO3dRVlYGX19fREYOY76Yzc0iJ6DTeZAWtPBi27ZuobSbhfKyckyIf4/G90N8/EQoiHRVj6pQVFxE1dOK6MhIqOhcIcSMFVgAcOa2SqVEEwmFkWqBw9FBFh2RLDh4YIdhEp6+lLJijEhjPz9/nvOUvlGcMGrUKD4vVBLxbt661VnJBGkVtMYAzoBqo5E3o3N3Z6XtAtDFys7KJnK9e4VztoSEBAwn4u3b9x02bvwKR48eI8UcSYyvZA0ZOHAgFSAdrG0dwiXnqungZ1HMhGFnte1xIBGGhUHn3WlcGF29ehU/X7hwgY27toMHD+HSpcsICQlBZqZIy8Es2+Ky2exsUFxiPddSzyTsvrsJpO2FhYUIDNRj8+ZMCokRs2alwIeq3dSpSbzgzJkzkJubh0mT3iNiliIpKYl2PgDTpn1AGhCAmJgYDs+CBfOpQuZz/FNJKcWYu3fLXu1IVlh4GydP5qCyshJpaen/OlZ4pqmpCQcOZPEcUQWFLojzwLBh77CXen0k6027fbuI+DK8U6IrWY5fCCAsLJTvBsPorj4LlV+NRvtSRi2W55w9Tr4kkpK6kaZcvPjbi0/FQizEAnv27KK8j+rqFwXGx8eb+1/U7lMdSUlJxowZH/L7jRs3mT8ilD3OoN3T8P9oy5YtpQPLY+ZEr/8LevXbQ1kkPCZ23518b9QDL/ozMr5F+zUCwBLx8BaMPxa/538JMAA+6WCl85pEfgAAAABJRU5ErkJggg==""",
    'akaSaveIncremental32':
    """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA4BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpERDg2NTcwMjAzRkQxMUU3QjNFM0RFQzhERjgwNUJCMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFRERCMTIxQTIxQzMxMUU3OTQ2MUU3NjNFNjg0RjFBQSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFRERCMTIxOTIxQzMxMUU3OTQ2MUU3NjNFNjg0RjFBQSIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpjNTY3MzBhYS1jMjk0LWI1NDAtOTUwNC0xMDNlZDZlZTI3NDEiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo0MjZlZjMzMC0yMWI4LTExZTctODI0My1lODk5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""",
    'newCamera32':
    """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA4BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpERDg2NTcwMjAzRkQxMUU3QjNFM0RFQzhERjgwNUJCMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDoyNEZBMTdGQTIxQzQxMUU3ODNBMUJBMTQxNDZDNUNDNCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDoyNEZBMTdGOTIxQzQxMUU3ODNBMUJBMTQxNDZDNUNDNCIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpjMzM1NDMwMy04NmM4LTNmNGQtODQ1Yi1jZWQ2ZTQ5NDBjYjIiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo0MjZlZjMzMC0yMWI4LTExZTctODI0My1lODk5ODJjOWUwYjIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz569WiJAAACW0lEQVR42uxWzYupURj/ccdHImKD7CwkNAu7aVYWcldEKNu5GwtK+QMofwDNepKF3WRJNtZKVpIskCLXQvKRfDWuc7o0V8z7zjWu273z1Hnf857nOc/zO897fs85HKvV+hXA07ap8Gel9/KCB+6VguNnzCfulYLvQXBxZfkE8G8CWCwWGAwG9M0kN0wG0+kU4/EYq9VqP8bhcPb9zWYDPp8PiUQCsVi8t7fb7cjn8xAIBOcBIM6CwSBUqtNs7fV6eHx8pCCFQiECgQDUajWen58hl8vPA7Ber/fByWoPM0DJvNUvl0sYjUa4XC6aEbbCCGAX9FT6X3/7fL7LbcLDYGyEjT2XrZNjzt4L6LcAHP6Ct/TpdJoV9d4FgGyobrf7ZoaIntCt0WggkUhQVrABT+dv7wMbpjowmUz2dWC3F147P1YHHA4HcrkcFArFSd/b+wAzC4hT0tgKseXxeDQ4m3k3uICQ38FUAT9Pw78GwBetVhs5plAqlYhEItDpdPB4PLi9vUWlUqGHi9/vh9PppGPNZhOhUIhScTgcIhaLYTabodPp0H6pVKLnxPEawiIDxEE0GoVUKoXBYIDb7Ua1WkU4HEar1cL9/T1qtRoFajKZ6ByNRoPtwjAajSiFz2JBsVik736/D5FIBJlMBovFQhuRer1ObWw2G9UXCgWqI1kgQD+chvP5HOVyGdls9pdxr9cLvV6PeDwOs9mMu7s7JJPJjweQyWTosbvLQCqVonuj3W7Tb5JysnICgpTms0vxJYWWYvL47wtR74rxvxMA30jnCsHJJePhhwADANxV/Qt4caLIAAAAAElFTkSuQmCC""",
    'separator16x32':
    """""",
    'toggleMinimal32':
    """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA4BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpERDg2NTcwMjAzRkQxMUU3QjNFM0RFQzhERjgwNUJCMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo5MzVEMzdFQTIxQzQxMUU3ODhFQUZBQkVENjNGRDlDQyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo5MzVEMzdFOTIxQzQxMUU3ODhFQUZBQkVENjNGRDlDQyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDplMTE1YzIxNi04YTYyLWNjNDYtYmQzNy03OGZhMjlhYTgzM2YiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo0MjZlZjMzMC0yMWI4LTExZTctODI0My1lODk5ODJjOWUwYjIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz591hhlAAAB1ElEQVR42mJ0cXHzZGBgmAvEkgz0Bc+BOJlpgCxngNo5l2mALIc7golhgAELukBGRhoDHx8fw5EjRxmWL1/OwM7OzsDIyIhV8/379xgUFZUIWlJfXwdnz5gxC0VuwENg1AGjDhh82RAEmJmZGb58+cxw+/YtBi4uLgYmJtzuBGVFqjvg79+/DDw8vAyqqmpUKQdG08CoA0YdgA8wAptk/wd9CEhKSjD09fWMoKIY5OPY2FgGCQlxMH/u3PlY5V68eMmwePFisHhpaQmY/vjxI8OsWbMZNDW1GGxtrcFi/Pz8DOfPXwCqXUJcCPj6+jI8f/6coaioBIzfvXsLlwsLC2W4du0qWPz+/fsMNjY2QLUv4Grv3bvPYGxsBFYLKsZBjlmwYCGDoaEBAy8vL/EhsGTJMqxBJiAgwODk5ATGIHDjxk0GZWVlBh8fLwZ5eXmw2L59+8D0y5cvwY4DYRDg4eFm+Pz5M2EHfPjwgcHKypLh7t27GHLfv/9gOHv2LMOWLdvgYmlpqQzPnj1nmDhxMphNcRoAGR4cHARP+VOmTIXLrV27jiEmJgoeAqDgvXPnLjgELC0tGB4+fDgMy4Fh74DnA2j/C5ADUkCMAbD8Kah7DhBgAFWemmscgiK6AAAAAElFTkSuQmCC""",
    'viewAll32':
    """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA4BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpERDg2NTcwMjAzRkQxMUU3QjNFM0RFQzhERjgwNUJCMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo2NTk0MkRGQTIxQzQxMUU3QTFCQTgzODlEQzVBMkUyNSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo2NTk0MkRGOTIxQzQxMUU3QTFCQTgzODlEQzVBMkUyNSIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDowNjBkNGFkYS05ZDgxLWI4NGYtOWNlNi0zNjNkNmE2NGY5OWIiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo0MjZlZjMzMC0yMWI4LTExZTctODI0My1lODk5ODJjOWUwYjIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5PL3koAAAByElEQVR42uyWMYvCMBTH/y1FHRTByboVxdkvIIiDcC4KbtLNW91cnVxd6u7g4KRfwMXvoeDgcPRAXMRFUHt94SJHsaae15bz7kFI0ob8f0nee4lUqVReAAztoiJYM89ntOSQxPGpOZRDEr9AyAjZ/gGeE+BwOGC73bJaZIpowH6/x2KxwOl0unyTJOnStiwLiqIgn88jHo+z8bvdDrVaDbPZDNFo9DEAEs/lcpBl98062xlluVxC0zTEYjG0221kMhlMp1OkUqnHAGhyLk6rde4AO0f7//F4ZKCNRgORSMTzcQkBuKjb9pM4H9NsNv1zQhJxrvwaoBvstwH4JNcm8yLwMMCtFTptPB57Cr27ACjEyBFFjkrjVqsVDMOAaZqe4YVOSPFNIcbzAPeFr5M788BgMEC9Xmd94RHbDxLLj0xIIARwKxHRxirwwUhUlAGf5zJKp9Po9/usres6qtXq77qO7/aBbreLZDLJ2qPRCJvNJliAXq/H6nK5jFKphMlkEhxAIpFg93yhUGD99XodrBMWi0WoqopOp4P5fB58FNDjhM6fvD6bzf4IgC+Z0KuxTCi4Z/7Gs9wMUf+dAF6pEYL4m11aHwIMAIHopvKJHqtjAAAAAElFTkSuQmCC""",
    'viewAnim32':
    """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA4BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpERDg2NTcwMjAzRkQxMUU3QjNFM0RFQzhERjgwNUJCMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo4MkNFMkM5QTIxQzQxMUU3QUE0Rjk2MUQ0RTM1MDU0MyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo4MkNFMkM5OTIxQzQxMUU3QUE0Rjk2MUQ0RTM1MDU0MyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDplMTE1YzIxNi04YTYyLWNjNDYtYmQzNy03OGZhMjlhYTgzM2YiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo0MjZlZjMzMC0yMWI4LTExZTctODI0My1lODk5ODJjOWUwYjIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6fGJbRAAACE0lEQVR42uxWO48BURT+TCYoCNGhECEaDXqJKCRbkei0ttVpFaLVeLQiCp1aovEnVCQKxWYoJIKCBLNzbnastZhZMibZ3ZNM5j5O7ved572GRCLxAqAhfU48V4TDAVlOJ3B8YDY4ncCPJDjoLP8EfieB7XaL+XzO/krCKyms12sMh0Ps9/vjmsFgOI5FUQTP8wgEArBYLEx/uVwimUyi1+vBZDI9RoDA/X4/OO66sw5SRxmNRvB6vTCbzcjlcnC5XOh0OnA4HI8RoMNlcLL23AMsjtL+brdjRNPpNIxGo+pwKRKQQa+5n8BlnUwmo10SEsi55ZcIXiN7NwH5kEuHqQF4mMAtC8+l3W6rKr0fEaASo0RUSlTSG4/HqFQqEARBNXnFJKT6phKT+4CcC6eHn/eBarWKVCrF5oohlh4kohadkIgQgVuNiBzLQwMhUKUO+Hsuo3g8zlrvvaJJDqiVmzlQKBRgs9nYuNVqYTAYsLXFYgGPx4PNZoNms8nGwWAQtVrty/5kMmFlSR4i3Xq9jul0qj4EpVIJ+Xwe3W4XsVjs8y0t1Titz2YzhMPh729tab9YLMJut8Ptdh91I5GI+j5gtVrZfR4KhdicrDm9nknIuktXLe2vVivmCdK5pXvVA9FoFE6nk7Hv9/vPrwKyguJfLpfh8/k0JaB/FSjcM3/jWS7oiD8lAq800AH8Tfqy7wIMAJfF6w+X7MagAAAAAElFTkSuQmCC""",
    'viewMesh32':
    """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA4BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpERDg2NTcwMjAzRkQxMUU3QjNFM0RFQzhERjgwNUJCMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo1OEM2RTU5QTIxQzQxMUU3QkE5OEMyRjg0QzlGNzIwOSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo1OEM2RTU5OTIxQzQxMUU3QkE5OEMyRjg0QzlGNzIwOSIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpjMzM1NDMwMy04NmM4LTNmNGQtODQ1Yi1jZWQ2ZTQ5NDBjYjIiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo0MjZlZjMzMC0yMWI4LTExZTctODI0My1lODk5ODJjOWUwYjIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7KbWnRAAACTElEQVR42uxWPaxhQRT+yA0KEtHIUohEdAoSvSjEakh0GsXbQqOTqBQSpYbo5EVDIVGKRKNUSpQkEooXFEJQkPhZZ/Lm5q3l3fvWWpt9e5KbO3dm7vm+c+b8jMLn830F8Hx6vuDPyvhwwJPyQeB4xXxWPghcJKHEg+U/gX+TwHa7xWw2Y28pEaQ2rNdr9Ho97Pd7cU6hUIjj4/EIQRBgt9uh1WrZ/uVyiWAwiGazCbVafRsBArfZbFAqrzvrcKoo/X4fVqsVGo0G8XgcJpMJtVoNBoPhNgKknIOTteceYOd4Wt/tdoxoOByGSqWSfVySBDjoNfcTON8TiUTuF4QEcm75JYLXyP4yAa7kkjI5ADcTeM/Cc6lUKrJS70MEKMUoEKUClfYNBgPkcjmMx2PZ5CWDkPKbUozXAR4Lb5Wf14F8Po9QKMS+JY/4dCE53qMSEhEi8F4hIscKuIMQqFQF/BzdMJVKweFw/N0eEK4xXywWsFgsGI1GLL28Xi82mw0KhQImkwlrOLROc9VqFcPhELFYDEajkelIJBLs7fF4EI1G2b5SqcR0yfIA5XI6nYZer4fZbGYKp9MpXC4XAoGACFKv1+H3++F2u8U5Dk4yn8/Ff51Op/w6QG14tVoxT3DW9ObtlazPZrNsTNa1Wi3WgjOZDNrtNhqNBlvrdrs//fuhQnRJCJAIFovFH+bL5TJ0Oh2SySQ6nc7vaceXhG46dN7cA2Q9keJHQ3FDcSJH7lIJ5QqrhBJ95nNcy8cPxJ8QgW80eAD4y+l5+i7AAJUqCpOdqe60AAAAAElFTkSuQmCC""",
    'viewPreset132':
    """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA4BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpERDg2NTcwMjAzRkQxMUU3QjNFM0RFQzhERjgwNUJCMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDozQjE4Qzg2QTIxQzQxMUU3ODYyM0NEOENEMDY2RDQ4RiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDozQjE4Qzg2OTIxQzQxMUU3ODYyM0NEOENEMDY2RDQ4RiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpjMzM1NDMwMy04NmM4LTNmNGQtODQ1Yi1jZWQ2ZTQ5NDBjYjIiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo0MjZlZjMzMC0yMWI4LTExZTctODI0My1lODk5ODJjOWUwYjIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7kWq3+AAACqElEQVR42uxWP0iqURT/KWUiCmFLuji4BDmYLi0uIVItCm5hoPRGlYZ2cQxcxFEa3RrDaHFp0EVMxMFBRMh0MTAd/Ec+z+F9HyHq9/V6Ph/xDly9373nnvM759xzzlW4XK4TADfTYcDfpeb7Oy6Ua1KOXzpvlGtSLoJQYs30H8D3BDAYDNBut/lfijakGHq9Ht7e3jAajcQ1hUIhzieTCVQqFXQ6HbRarcjvdrvx8PCAra2trwEgYeFwGAbD4mxtNptIJBIMUq1WIxQKwWg04vb2Fnq9/msAxuOxqJysnfUAJ/N0fzgcwmKxwOv1skfkkiQAQeki93/8Pjs7W90lnFUmh+TwK+UKmSfss4B+C8BsCJbtp1IpWan3KQB0oRqNxlIP0T6lW7VaRTwe56yQA57PT98DE6k60O12xTog3IWPwufVAY/Hg/v7e+zs7CyUPX0PSGcBCaUhl4h3c3OTlcs5t4EVEIVDqgL+m83I5/Ph9PT0+7bjeQbOvQO7u7u4urrieafTQTKZhNPpxOvrK9LpNO8Hg0FcX1/D7/fDZDIxb71e56ZEil5eXpDJZHB0dIT9/X1OUavVynxms5n5FgJotVoiABJms9lQLBZxfHzMAOj76ekJDoeDu180GmXey8tLHB4ezrWezlFnFIxYGgJCSC01FouJqEulEiujPbKoUCiwwHw+z3WCBs2l2q+sO0Buo2pGXqhUKuI6KaAY9vt9dilZY7fbeY8KEc1pjYjeA4IxAtE5jUYjDYCEkyvJA2S1QI+PjxzvcrksfpNQ4otEIqjVasjlcshms9jb2+P17e1t8fzz8zPLJe/KLsWzoQkEAnz5yOVfJS7F9COHzs99ODiw4u4uPc2M7h9LTYXTKd8DqypEzTXqbxGAHzRZg3J6ZFz8FGAAC9IqZulk/csAAAAASUVORK5CYII=""",
    'viewPreset232':
    """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA4BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpERDg2NTcwMjAzRkQxMUU3QjNFM0RFQzhERjgwNUJCMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo0Nzc0RkY3QTIxQzQxMUU3OUU1MkI4OTIzMzZDMTNEQSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo0Nzc0RkY3OTIxQzQxMUU3OUU1MkI4OTIzMzZDMTNEQSIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpjMzM1NDMwMy04NmM4LTNmNGQtODQ1Yi1jZWQ2ZTQ5NDBjYjIiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo0MjZlZjMzMC0yMWI4LTExZTctODI0My1lODk5ODJjOWUwYjIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7qvqU6AAACcUlEQVR42uxWPYxpURD+yPopCKFYtEoKiU6iUUjeNjahEqp9hYZKohKR6GhEvYWgU9toVKLbbYRQSCjEimhQ+Mt65uTdG8/b3Xvtxkre20mOe82ZO9935szMORK32/0DwP1+GPG1Mnp5wZ30QuD4jXkvvRA4T0KKC8s3gX+TwGq1wnQ6ZU8huRIyWCwWmM1m2Gw2vE4ikfDvu90OcrkcarUaKpWKt/d4PKhWq1AoFJ8jQM4ikQiMxrerdTQaIZfLMZJKpRLhcBgmkwnlchk6ne5zBLbbLQ9Oqz2OACvm/fx6vYbVaoXX62URESuCBDjQt8J/+N/v958vCY/BxIgYe6lYJ685O5XQhwgcb8F786VSSVTpnUSAEmo4HL4bIZqncuv1eshms6wqxJBn3+/vAzuhPjCfz/k+wOXCofPX+sDt7S0eHh6g1+vf9L2/DwhXATmlIVbIViaTMXAx313hDELbIdQBv0/DLyNgMBiQyWROr4J4PA6NRsPe8/k8+v0+QqEQrq+vmS4ajSIQCMBms/E2k8kEwWCQ2YzHYxQKBWbHCdk0m80/qkCwDF0uFywWC1qtFux2O9LpNL8ycp5MJlmZktApSL2gUqnA5/MxXb1eZ3aHRATLkGqaznNudYPBALVajR2xqVQKjUaDgZAuFouh0+mgWCxCq9UywjRIut3ux8rQ6XSyI5ZY39zcwGw2Mz2BEDkCfXp6YiRo0MoJdLlc4vHxkekOF8M9uUgJEiDmDoeDJQ+tntsKIsNFhIRLLtrvdrvN9HQkcxHg9pzmE4nEXzkgqhWfU1gO0M9/34hGF8R/JgI/6eUC4HTJuPslwAAKZSDPd5BX2gAAAABJRU5ErkJggg==""",
    'rsUtility32':
    """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA4BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpERDg2NTcwMjAzRkQxMUU3QjNFM0RFQzhERjgwNUJCMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDoxMUYzQ0IxQTIxQzQxMUU3QkRFM0FENkI5RDBFNUNBQSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDoxMUYzQ0IxOTIxQzQxMUU3QkRFM0FENkI5RDBFNUNBQSIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo1YTQwMjk0Yy1mOWIyLWVhNDktOTk3NS03MGRkOWFkNGIwN2YiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo0MjZlZjMzMC0yMWI4LTExZTctODI0My1lODk5ODJjOWUwYjIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5AqZdDAAAAk0lEQVR42mJ0cXHzZGBgmAvEkgz0Bc+BOJlpgCxngNo5l2mALIc7golhgMGoA0YdwIIu0J+qzsDMxAhmzzjMTFXLGBn+M1y9dm00CkYdMOoA/NmwcPbNER4CT58+Y/j//z9NLGNkZGSQlpYaTYSjDhh1AP5siJ5NRqNg1AEjwgHPB9D+FyAHpIAYA2D5U1D3HCDAACZdF5Ua3ZgKAAAAAElFTkSuQmCC""",
    'randomizedDuplicate32':
    """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA4BpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpERDg2NTcwMjAzRkQxMUU3QjNFM0RFQzhERjgwNUJCMyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDowMUE1OTk1QTIxQzQxMUU3QUVGMUI0NkM5MjY3OTdBQyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDowMUE1OTk1OTIxQzQxMUU3QUVGMUI0NkM5MjY3OTdBQyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxNyAoV2luZG93cykiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo2ZDA4MjRhZC1jMjhiLTEzNDctYjk4ZC1hMWM5MjBlZDBlZWQiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo0MjZlZjMzMC0yMWI4LTExZTctODI0My1lODk5ODJjOWUwYjIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7VL9lAAAACoUlEQVR42uxXPWsyQRAeD0FRgl8kRhAk2AgiCiKkshIhIUV+gIWfYCM2NhZWFiL4CxQb/4BWgo2FlaVNQK0sfNFYiOIHChJfZ8geMQlqTt9c8w4sN3t7t89zz8zO7km8Xu8DABR3zQC/a4NdC3EigcM7ZpETCZwnwV16xslkAhKJhBr6x+ziBFarFYRCIQiHw+QfM+mlCeCXL5dL2G635P+6AlKp9Fv/nymAcV6v13x/OBzC29sb+f1+HzabDT8mk8lArVbvK7arA9tzCHAcRzGfz+ckOYJrtVoaG4/HNI6mVCqhWCzy5C4eAhZvjD27Mv/ge+cqwEKABBAQQ5DJZGgsmUyCwWDgCX0XgrNz4MuEu8RjdcBoNIJOpxO+CmKxGJTLZajVapDP5+Hx8RGurq72nnE6nTQeDAapj0nHwvExAX9MACd8enoChUJBfZPJBPF4HEqlEo0xIna7fe89lBoTDttZOYBfjKCoQrfbBbfbDc/Pz2C1WvlnRqMR3NzckO/3+2EwGFBOfFwFn0N0ch1A8JeXFwJHazQa1FByj8cD9/f3BI5Vr1AoEDjLCbbUjoFfZBWcaxyIbP8JnETA5/NRDfipnfKe6ApID7F3OBzkv76+0pq+vb2FSCQC6XSa7qdSKahUKlSMNBoN6PV6kMvlUK/XoVqtCidgs9nAYrFALpeDxWIB0Wj06EQInM1mqTYEAgHodDrCCVxfX0O73aadjQ7w70XmkGHRms1m1FAxVsIFJSFWt7u7O5Icaz76zFQqFd03m83kM8M+u2IV7fV6whVoNpvgcrkgkUjAdDrlT7eoSKvV+nKfhQBDhobxRyVOOshcohRjwmKSnpp4ewp8OqIJMrbrCplL4vGIvxkNRMQfIoEwOiKA/8Hf878CDACNmBjLwq1pUAAAAABJRU5ErkJggg=="""
}
def _writeTemp(string):
    tempDir = tempfile.gettempdir()
    p = os.path.normpath(os.path.join(tempDir,'%s_%s.%s'%(windowPrefix, string,'png')))
    f = open(p, 'w')
    f.write(base64.b64decode(icons[string]))
for key in icons:
    _writeTemp(key)
def _getPath(string):
    tempDir = tempfile.gettempdir()
    p = os.path.normpath(os.path.join(tempDir,'%s_%s.%s'%(windowPrefix, string,'png')))
    if os.path.exists(p):
        return p
    else:
        print 'Couldn\'t find icon file for %s.'%string
        return None

# CreateUI
def createUI():
    tabIdx = -1
    btnIdx = -1
    shelfIdx = -1
    btnCmds = []

    mayaMainWindowPointer = OpenMayaUI.MQtUtil.mainWindow()
    mayaMainWindow = shiboken2.wrapInstance(long(mayaMainWindowPointer), QtWidgets.QWidget)

    try:
        cmds.deleteUI('%s'%(windowID))
        cmds.deleteUI('%s%s'%(windowID, 'WorkspaceControl'))
    except:
        pass

    window = QtWidgets.QWidget()
    window.setWindowTitle('Custom Toolset')
    window.parent = mayaMainWindow
    window.setObjectName(windowID)
    window.setContentsMargins(0,0,0,0)
    window.setFixedHeight(32+4)
    # window.setSpacing(0)

    workspacePanel1 = mayaMainWindow.children()[6]
    mayaLayoutInternalWidget = workspacePanel1.children()[2]
    mainWorkBar = mayaLayoutInternalWidget.children()[4]
    viewports = mainWorkBar.children()[1]


    window.show()
    shelfIdx += 1
    cmds.shelfLayout(
        '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        parent=windowID,
        style='iconOnly',
        width=windowSize[0],
        height=32,
        cellWidthHeight =[windowSize[1]+margin[0]]*2,
        # backgroundColor=[color+0.05]*3,
        preventOverride=True
    )


    btnIdx += 1
    btnCmds.append(akaLaunchPipe)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=windowSize[1],
        height=windowSize[1],
        marginWidth=0,
        marginHeight=0,
        align='center',
        image=_getPath('akaPipe32'),
        useAlpha=True,
        flat=True,
        version='2017',
        sourceType='python',
        command=btnCmds[btnIdx]
    )
    btnIdx += 1
    btnCmds.append(akaSaveIncremental)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=windowSize[1],
        height=windowSize[1],
        marginWidth=0,
        marginHeight=0,
        align='center',
        image=_getPath('akaSaveIncremental32'),
        useAlpha=True,
        flat=True,
        version='2017',
        sourceType='python',
        command=btnCmds[btnIdx]
    )
    btnIdx += 1
    btnCmds.append(akaPipeUtility)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=windowSize[1],
        height=windowSize[1],
        marginWidth=0,
        marginHeight=0,
        align='center',
        image=_getPath('akaPipeUtility32'),
        useAlpha=True,
        flat=True,
        version='2017',
        sourceType='python',
        command=btnCmds[btnIdx]
    )
    #Separator
    btnIdx += 1
    btnCmds.append(separator)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=24,
        height=windowSize[1],
        image=_getPath('separator16x32'),
        useAlpha=True,
        flat=True,
        sourceType='python',
        command=btnCmds[btnIdx],
        enable=False
    )
    btnIdx += 1
    btnCmds.append(rsUtility)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=windowSize[1],
        height=windowSize[1],
        marginWidth=0,
        marginHeight=0,
        align='center',
        image=_getPath('rsUtility32'),
        useAlpha=True,
        flat=True,
        version='2017',
        sourceType='python',
        command=btnCmds[btnIdx]
    )
    #Separator
    btnIdx += 1
    btnCmds.append(separator)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=24,
        height=windowSize[1],
        image=_getPath('separator16x32'),
        useAlpha=True,
        flat=True,
        sourceType='python',
        command=btnCmds[btnIdx],
        enable=False
    )
    btnIdx += 1
    btnCmds.append(importCameraPreset)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=windowSize[1],
        height=windowSize[1],
        marginWidth=0,
        marginHeight=0,
        align='center',
        image=_getPath('newCamera32'),
        useAlpha=True,
        flat=True,
        version='2017',
        sourceType='python',
        command=btnCmds[btnIdx]
    )
    btnIdx += 1
    btnCmds.append(viewPreset1)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=windowSize[1],
        height=windowSize[1],
        marginWidth=0,
        marginHeight=0,
        align='center',
        image=_getPath('viewAll32'),
        useAlpha=True,
        flat=True,
        version='2017',
        sourceType='python',
        command=btnCmds[btnIdx]
    )
    btnIdx += 1
    btnCmds.append(viewPreset2)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=windowSize[1],
        height=windowSize[1],
        marginWidth=0,
        marginHeight=0,
        align='center',
        image=_getPath('viewAnim32'),
        useAlpha=True,
        flat=True,
        version='2017',
        sourceType='python',
        command=btnCmds[btnIdx]
    )
    btnIdx += 1
    btnCmds.append(viewPreset3)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=windowSize[1],
        height=windowSize[1],
        marginWidth=0,
        marginHeight=0,
        align='center',
        image=_getPath('viewMesh32'),
        useAlpha=True,
        flat=True,
        version='2017',
        sourceType='python',
        command=btnCmds[btnIdx]
    )
    btnIdx += 1
    btnCmds.append(toggleMinimal)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=windowSize[1],
        height=windowSize[1],
        marginWidth=0,
        marginHeight=0,
        align='center',
        image=_getPath('toggleMinimal32'),
        useAlpha=True,
        flat=True,
        version='2017',
        sourceType='python',
        command=btnCmds[btnIdx]
    )
    #Separator
    btnIdx += 1
    btnCmds.append(separator)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=24,
        height=windowSize[1],
        image=_getPath('separator16x32'),
        useAlpha=True,
        flat=True,
        sourceType='python',
        command=btnCmds[btnIdx],
        enable=False
    )
    btnIdx += 1
    btnCmds.append(layoutWindow)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=windowSize[1],
        height=windowSize[1],
        marginWidth=0,
        marginHeight=0,
        align='center',
        image=_getPath('viewPreset132'),
        useAlpha=True,
        flat=True,
        version='2017',
        sourceType='python',
        command=btnCmds[btnIdx]
    )
    btnIdx += 1
    btnCmds.append(assetWindow)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=windowSize[1],
        height=windowSize[1],
        marginWidth=0,
        marginHeight=0,
        align='center',
        image=_getPath('viewPreset232'),
        useAlpha=True,
        flat=True,
        version='2017',
        sourceType='python',
        command=btnCmds[btnIdx]
    )
    #Separator
    btnIdx += 1
    btnCmds.append(separator)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=24,
        height=windowSize[1],
        image=_getPath('separator16x32'),
        useAlpha=True,
        flat=True,
        sourceType='python',
        command=btnCmds[btnIdx],
        enable=False
    )
    btnIdx += 1
    btnCmds.append(randomizedDuplicate)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=windowSize[1],
        height=windowSize[1],
        marginWidth=0,
        marginHeight=0,
        align='center',
        image=_getPath('randomizedDuplicate32'),
        useAlpha=True,
        flat=True,
        version='2017',
        sourceType='python',
        command=btnCmds[btnIdx]
    )
    #Separator
    btnIdx += 1
    btnCmds.append(separator)
    cmds.shelfButton(
        parent = '%s_%s%s' % (windowPrefix, 'shelfLayout', shelfIdx),
        annotation='',
        width=24,
        height=windowSize[1],
        image=_getPath('separator16x32'),
        useAlpha=True,
        flat=True,
        sourceType='python',
        command=btnCmds[btnIdx],
        enable=False
    )

    ptr = OpenMayaUI.MQtUtil.findControl('Outliner')
    OutlinerQt = shiboken2.wrapInstance(long(ptr), QtWidgets.QWidget)
    ptr = OpenMayaUI.MQtUtil.findControl('NEXDockControl')
    NEXDockControlQt = shiboken2.wrapInstance(long(ptr), QtWidgets.QWidget)
    ptr = OpenMayaUI.MQtUtil.findControl('MainPane')
    MainPaneQt = shiboken2.wrapInstance(long(ptr), QtWidgets.QWidget)
    ptr = OpenMayaUI.MQtUtil.findControl('ToolBox')
    ToolBoxQt = shiboken2.wrapInstance(long(ptr), QtWidgets.QWidget)

    layout = MainPaneQt.layout()
    layout.insertWidget(0, window)
createUI()
